{WinHelper V1.05 by FNX A1 2022}
{TITTLE}
{WIN_W}00495
{JPG_SIZE}00005
{IMG_AUTO}10000
{WIN_DESC_H}00492
{WIN_DESC_PIC_H}00068
{WIN_EDT_GRP_H}00185
{WIN_ALING_LEFT}00001
{WIN_IMG_CFG}.0010.0010.0640.0480.0100
{PANLAT_CLR}000,255,000

*PYTON
	·20230925125724
	:https://youtu.be/b4AgSGA39Ds?t=1650
	:Descargamos la version de pyton desde:
	:- https://www.python.org/downloads/
	:Instalamos Pyton y seguimoslas indicaciones
	:Tambien podemos instalarlo de modo avanzado.
	:-,
	:- Habrimos una ventana CMD (en windows)
	:- Para ver que esta todo correcto ejecutamos el comando
	:- py - - version (Doble - sin espacios)
	:- Si todo esta ok nos mostrara Python X.XX.X
	:- py es un comando que ataca al python.exe de la ruta donde lo instalaste.
	:- Si lo instalaste a lo loco es posible que esta ruta no este bien, te lo dira.
	:-
	:- REPL = Read, Evol, Print and Loop
	:- Bucle de lectura, Evaluacion e Impresion.
	:- Asi es como se llama el interprete, cuando
	:- ejecutamos el propio Python.exe se carga un editor
	:- de texto que lee, evalua , ejecuta y repite .
	:- Si queremos SALIR del REPL introducimos el comando CTRL+Z +Intro
	:- el REPL nos permite ejecutar bloques de codigo o
	:- comandos sueltos pero no nos permite crear programas.
	:- Para crear programas necesitamos un IDE
	:-
	:-IDE = Entorno de Desarrollo Integrado.
	:-Este es un programa que nos permite guardar y administrar
	:-los ficheros y generar compilados capturando errores y demas.
	:-
	:-Tenemos muchas opciones e incluso podemos generar los fichero
	:-con el notepad pero los mas usados son:
	:- VSCode con las extensiones Python y Pylance o Pylint
	:-PyCharm creado explicitamente por la comunidad para python (Es de pago)
	:-Visual Studio Code
	:-https://code.visualstudio.com/docs/?dv=winzip
	:-Le añadiremos dos extensiones .
	:- Python y Pylance o Pylint
	:VSC nos permite tener todo a mano en este caso abrimos
	:el terminal que seria como una ventana dos para ejecutar el compilador.
	:Pyton anida con tabs.
	:Pyton es un lenguaje interpretado.
	:Pyton es Freeware
	:Pyton es Open Source
	:Pyton es CaseSensitive
	:Las variables son todas VARIANT
	:las variables son publicas
	:las variables son referidas (paso por referenica)
	:una aplicacion entra por la funcion
	:def main():
	:una clase entra por la funcion
	:__init__(self, nombre);
	:si una aplicacion se usa como clase se tiene que forzar
	:la funcion main usando.
	:if __name__ == "__main__": main();
	:
	*Variables
		·20230925125449
		:Por norma todas las variables son de tipo VARIANT
		:esto significa que no tienen tipo definido.
		:Incluso una variable puede tener distintos tipos
		:de datos en su vida.
		:Todas las variables son publicas y accesibles para
		:todo el codigo.
		:Por norma las variables y funciones privadas dentro
		:de las clases comienzan con un "_" pero es por norma
		:es posible acceder tambien a dichas variables.
		:
	*(Bucles) For
		·20230925125449
		:#Repetimos Por cada letra de hello (5lops)
		:for character in "hello":
		:print(character)
		:#Repetimos de 5 hasta 10 (6lops)
		:for X in range (5,11):
		:print(X)
		:#Repetimos de 0 hasta 3 (4lops)
		:for X in range(4):
		:print(X)
		:#Repetimos de 10 hasta 1 decontando 1 en cada loop (10lops)
		:for X in range(10,0,-1):
		:print(X)
		:#Repetimos de 0 hasta 8 incrementando 2 en cada loop (5lops)
		:for X in range(0,10,2):
		:print(X)
		:
	*Condicionales
		·20230925125654
		:> = Mayor que
		:< = Menor que
		:== Igual que
		:>= Mayor o igual
		:<= Menor o igul
		:!= Distinto que
		:or = X o Y
		:and = X y Z
		:not = no X ( X and not Y)
		:
		*if else elif
			·20230925125449
			:if x>0:
			:<tab>print(x)
			:else:
			:<tab>print(-x)
			:- - -
			:if x>0:
			:<tab>print(x)
			:elif xz0:
			:<tab>print(x)
			:else:
			:<tab>print(-x)
			:- - -
			:
	*Operadores
		·20230925125449
		:* =Multiplicacion
		:** =Potencia
		:/ =Division
		:// = Division entera
		:% = Modulo (resto de una division)
		:+ = concatena dos variables texto.
		:' = define cadena
		:" = define cadena.
		:# comenta una linea.
		:int('23') =convierte un texto a entero.
		:float('123') = convierte un texto a flotante.
		:round(-1.7) = -2 redondea un numero a su proximo entero.
		:bool(-10) = es falso si es 0 o vacio, el resto es true.
		:len("cad") = tamaño de la cadena pasada =3
		:str(123) = obtiene la cadena de un numero = "123"
		:"CADENA".find("A") = 1 retorna la primera coincidencia si no -1
		:"CADENA".find("A",2) = 5 retorna la siguiente coincidencia desde la pos 2 (si no -1)
		:"CADENA".replace("A","Z") = "CZDENZ" Remplaza una cadena por otra.
		:"CADENA".replace("A","Z",1) = "CZDENA" Remplaza una cadena por otra solo 1 vez
		:"CADENA".count("A") = 2 retorna las veces que a encontrado la cadena.
		:"CADENA"[1] ="A" obtiene la posicion 1 de la cadena (Comienza por la 0)
		:"ABCDE"[-1] ="E" Los valores negativos comienzan desde el final
		:"ABCDE"[1:3] ="BCD" Coje los valors desde la pos 1 hasta la 3.
		:"ABCDE"[1:-1] ="BCD" Coje los valores desde la posicion 1 hasta la penultima
		:"ABCDE"[:2] ="AB" Coje desde el 0 hasta el 2
		:"ABCDE"[2:] ="CDE" Coje desde el 3 hasta el fonal
		:"ABCDE"[::2] ="ACE" Coge cada 2 Chars
		:"ABCDEF"[1::2] ="BDF" Coge cada 2 Chars desde el 1
		:"ABCDEF"[::-1] ="FEDCBA" Invierte la cadena
		:isinstance(Var, Tipo) = bool Revisa si una variable es del tipo dado.
		:
	*Clases
		·20230925125449
		:Las clases con bloques de codigos que agrupan
		:funciones y variables y realizan tareas concretas.
		:Se usa el codigo "class NombreClase" para crearlas
		:class ClaseA
		:<tab>def __init__(self):
		:<tab><tab>self.variable = 10
		:la funcion "def __init__(self)" es la primera funcion
		:que por defecto es llamada al instanciar la clase.
		:Aunque las variables son publicas es mejor usar seters y geters
		:def get_nombre(self):
		:<tab>return self._nombre
		:def set_nombre(self, nuevo_nombre):
		:<tab>self._nombre = nuevo_nombre
		:o mejor usar los decoradores @property y @NOMBRE.setter
		:class Persona:
		:<tab>def __init__(self, nombre, edad):
		:<tab><tab>self._nombre = nombre
		:<tab><tab>self._edad = edad
		:<tab>@property
		:<tab>def nombre(self):
		:<tab><tab>return self._nombre
		:<tab>@nombre.setter
		:<tab>def nombre(self, nuevo_nombre):
		:<tab><tab>self._nombre = nuevo_nombre
		:hojo @nombre.setter @nombre es el nombre de
		:la funcion o variable.
		:
	*import math
		·20230925125449
		:Importa la libreria math
		:import math
		:math.ceil(4.2)
		:form math import ceil.
		:ceil(4.2)
		:floor(x)
		:ceil(x)
		:sqrt(x) = Raiz cuadrada
		:log(x) = Logaritmo
		:e = constante 2.71828
		:pi = constante 3.1415
		:sin() = seno
		:asing() = arcoseno
		:
	*print
		·20230925125449
		:#imprime los numeros 4,5,6 separados por , y terminado en +
		:print(4, 5, 6, sep=', ', end='. ')
		:
	*Entrada, Impresion, Salida
		·20230925125449
		:print()
		:- Imprime un texto en pantalla.
		:print('Hola' + i + 'mundo')
		:- imprime el texto y concatena texto y numero.
		:variable = input()
		:- captura la linea de entrada y la guarda en variable
		:#comentario
		:- comenta la liena
		:
	*Funciones
		·20230925130000
		:Las funciones o subprocesos se establecen
		:con la clave "DEF"
		:Esta funcion es la primera que se ejecuta por defecto
		:al entrar en una aplicacion
		:def main():
		:<tab>codigo
		:<tab>codigo
		:Para pasar variables a una funcion.
		:def mi_funcion(arg1, arg2):
		:<tab>codigo
		:<tab>codigo
		:mi_funcion(variable1, variable2)
		:Las variables en pyton
		:
	*Instalacion
		·20230925125449
		:Podemos encontrar el compilador en
		:https://www.python.org/downloads/
		:
